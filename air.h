#pragma once
//
//  bottle.h
//  OpenGL Bottle Object
//

#ifndef AIR_H
#define AIR_H

#include <glad/glad.h>
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include "shader.h"

class Air {
public:
    // Material properties
    glm::vec3 ambient;
    glm::vec3 diffuse;
    glm::vec3 specular;

    // Texture properties
    unsigned int diffuseMap;
    unsigned int specularMap;
    float shininess;

    // Constructor with default values
    Air()
        : ambient(glm::vec3(0.2f)), diffuse(glm::vec3(0.5f)), specular(glm::vec3(1.0f)), shininess(32.0f),
        diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    Air(glm::vec3 amb, glm::vec3 diff, glm::vec3 spec, float shiny)
        : ambient(amb), diffuse(diff), specular(spec), shininess(shiny), diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    Air(unsigned int dMap, unsigned int sMap, float shiny)
        : diffuseMap(dMap), specularMap(sMap), shininess(shiny), ambient(glm::vec3(0.0f)), diffuse(glm::vec3(0.0f)), specular(glm::vec3(0.0f)) {
        setUpVertexData();
    }

    ~Air() {
        glDeleteVertexArrays(1, &VAO);
        glDeleteBuffers(1, &VBO);
        glDeleteBuffers(1, &EBO);
    }

    void drawWithMaterial(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();
        shader.setVec3("material.ambient", ambient);
        shader.setVec3("material.diffuse", diffuse);
        shader.setVec3("material.specular", specular);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

    void drawWithTexture(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();

        shader.setInt("material.diffuse", 0);
        shader.setInt("material.specular", 1);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, diffuseMap);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, specularMap);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

private:
    unsigned int VAO, VBO, EBO;
    std::vector<float> vertices;
    std::vector<unsigned int> indices;

    void setUpVertexData() {
        // Define the vertex data (positions, normals, texture coordinates)
        vertices = {
        -480.930542f, 96.513947f, -48.877190f, -0.7089f, 0.6714f, 0.2161f, 0.0712f, 0.5323f,  // Vertex 1
        -500.000000f, 80.930527f, -65.167374f, -0.7089f, 0.6714f, 0.2161f, 0.0540f, 0.5471f,  // Vertex 2
        480.930542f, 96.513947f, -48.877190f, -0.7089f, 0.6714f, 0.2161f, 0.0540f, 0.4424f,  // Vertex 3
        500.000000f, 80.930527f, -65.167374f, -0.7089f, 0.6714f, 0.2161f, 0.0703f, 0.4281f,  // Vertex 4
        -500.000000f, -80.930527f, -65.167374f, 0.0000f, 0.7226f, -0.6913f, 0.9412f, 0.5323f,  // Vertex 5
        -480.930542f, -96.513947f, -48.877190f, 0.0000f, 0.7226f, -0.6913f, 0.9584f, 0.5471f,  // Vertex 6
        480.930542f, -96.513947f, -48.877190f, 0.0000f, 0.7226f, -0.6913f, 0.9421f, 0.4281f,  // Vertex 7
        500.000000f, -80.930527f, -65.167374f, 0.0000f, 0.7226f, -0.6913f, 0.0465f, 0.6825f,  // Vertex 8
        -481.964600f, -63.984173f, 46.636955f, 0.7089f, 0.6714f, 0.2161f, 0.0285f, 0.7020f,  // Vertex 9
        -500.000000f, -50.682232f, 30.965973f, 0.7089f, 0.6714f, 0.2161f, 0.9715f, 0.7020f,  // Vertex 10
        -500.000000f, 50.682232f, 30.965973f, 0.7089f, 0.6714f, 0.2161f, 0.1743f, 0.7452f,  // Vertex 11
        -481.964600f, 63.984165f, 46.636955f, 0.7089f, 0.6714f, 0.2161f, 0.9920f, 0.7137f,  // Vertex 12
        500.000000f, -50.682232f, 30.965973f, -0.7089f, -0.6714f, 0.2161f, 0.9535f, 0.6825f,  // Vertex 13
        481.964600f, -63.984173f, 46.636955f, -0.7089f, -0.6714f, 0.2161f, 0.9119f, 0.6648f,  // Vertex 14
        481.964600f, 63.984165f, 46.636955f, -0.7089f, -0.6714f, 0.2161f, 0.1527f, 0.7221f,  // Vertex 15
        500.000000f, 50.682232f, 30.965973f, -0.7089f, -0.6714f, 0.2161f, 0.2008f, 0.8899f,  // Vertex 16
        428.831085f, 74.883438f, 27.952194f, 0.0000f, -0.7226f, -0.6913f, 0.2152f, 0.9855f,  // Vertex 17
        -428.831085f, 74.883438f, 27.952194f, 0.0000f, -0.7226f, -0.6913f, 0.2008f, 0.9731f,  // Vertex 18
        428.032166f, 93.739281f, -35.192474f, 0.0000f, -0.7226f, -0.6913f, 0.9804f, 0.8818f,  // Vertex 19
        -428.032166f, 93.739281f, -35.192474f, 0.0000f, -0.7226f, -0.6913f, 0.9948f, 0.8899f,  // Vertex 20
        428.831085f, 43.314926f, 40.621536f, 0.7089f, -0.6714f, 0.2161f, 0.9948f, 0.9731f,  // Vertex 21
        -428.831085f, 43.314926f, 40.621536f, 0.7089f, -0.6714f, 0.2161f, 0.2152f, 0.8818f,  // Vertex 22
        428.032166f, 62.170769f, -36.053635f, 0.7089f, -0.6714f, 0.2161f, 0.9804f, 0.9855f,  // Vertex 23
        -428.032166f, 62.170769f, -36.053635f, 0.7089f, -0.6714f, 0.2161f, 0.9584f, 0.4424f,  // Vertex 24
        436.830841f, -93.356651f, -34.123257f, -0.6559f, 0.0000f, 0.7549f, 0.1973f, 0.8727f,  // Vertex 25
        -436.830841f, -93.356651f, -34.123257f, -0.6559f, 0.0000f, 0.7549f, 0.9920f, 0.8727f,  // Vertex 26
        437.770264f, -75.266068f, 14.286707f, -0.6559f, 0.0000f, 0.7549f, 0.1973f, 0.7137f,  // Vertex 27
        -437.770264f, -75.266068f, 14.286707f, -0.6559f, 0.0000f, 0.7549f, 0.0881f, 0.6648f,  // Vertex 28
        436.830841f, -70.508728f, -34.123257f, 0.6559f, 0.0000f, 0.7549f, 0.9545f, 0.5681f,  // Vertex 29
        -436.830841f, -70.508728f, -34.123257f, 0.6559f, 0.0000f, 0.7549f, 0.9128f, 0.6069f,  // Vertex 30
        437.770264f, -52.418144f, 32.817211f, 0.6559f, 0.0000f, 0.7549f, 0.0258f, 0.7683f,  // Vertex 31
        -437.770264f, -52.418144f, 32.817211f, 0.6559f, 0.0000f, 0.7549f, 0.0466f, 0.7879f,  // Vertex 32
        -405.000000f, -128.192612f, 5.000000f, 0.0000f, 0.0000f, 1.0000f, 0.1527f, 0.7221f,  // Vertex 33
        405.000000f, -128.192612f, 5.000000f, 0.0000f, 0.0000f, 1.0000f, 0.1743f, 0.7442f,  // Vertex 34
        -405.000000f, -88.192612f, 5.000000f, 0.0000f, 0.0000f, 1.0000f, 0.0466f, 0.7873f,  // Vertex 35
        405.000000f, -88.192612f, 5.000000f, 0.0000f, 0.0000f, 1.0000f, 0.0258f, 0.7683f,  // Vertex 36
        -405.000000f, -48.192612f, -25.000000f, 0.0000f, 0.9711f, 0.2388f, 0.1743f, 0.9745f,  // Vertex 37
        405.000000f, -48.192612f, -25.000000f, 0.0000f, 0.9711f, 0.2388f, 0.0466f, 0.9315f,  // Vertex 38
        -405.000000f, -48.192612f, -35.000000f, 0.0000f, 0.9711f, 0.2388f, 0.0302f, 0.0868f,  // Vertex 39
        405.000000f, -48.192612f, -35.000000f, 0.0000f, 0.9711f, 0.2388f, 0.3101f, 0.0868f,  // Vertex 40
        -405.000000f, -88.192612f, -5.000000f, 0.0000f, 0.0000f, -1.0000f, 0.3098f, 0.1199f,  // Vertex 41
        405.000000f, -88.192612f, -5.000000f, 0.0000f, 0.0000f, -1.0000f, 0.0305f, 0.1199f,  // Vertex 42
        -405.000000f, -128.192612f, -5.000000f, 0.0000f, 0.0000f, -1.0000f, 0.0302f, 0.0868f,  // Vertex 43
        405.000000f, -128.192612f, -5.000000f, 0.0000f, 0.0000f, -1.0000f, 0.3101f, 0.0868f,  // Vertex 44
        -423.225006f, 41.836266f, 0.000000f, 0.0000f, -0.9654f, 0.2609f, 0.3098f, 0.1199f,  // Vertex 45
        423.225006f, 41.836266f, 0.000000f, 0.0000f, -0.9654f, 0.2609f, 0.0305f, 0.1199f,  // Vertex 46
        -423.225006f, 91.836266f, 0.000000f, 0.0000f, -0.9654f, 0.2609f, 0.8941f, 0.4451f,  // Vertex 47
        423.225006f, 91.836266f, 0.000000f, 0.0000f, -0.9654f, 0.2609f, 0.1183f, 0.4451f,  // Vertex 48
        -423.225006f, 91.836266f, -10.000000f, 1.0000f, 0.0000f, 0.0000f, 0.8933f, 0.5152f,  // Vertex 49
        423.225006f, 91.836266f, -10.000000f, 1.0000f, 0.0000f, 0.0000f, 0.1191f, 0.5152f,  // Vertex 50
        -423.225006f, 41.836266f, -10.000000f, 1.0000f, 0.0000f, 0.0000f, 0.0316f, 0.0695f,  // Vertex 51
        423.225006f, 41.836266f, -10.000000f, 1.0000f, 0.0000f, 0.0000f, 0.2994f, 0.0695f,  // Vertex 52
        -423.225006f, 51.836266f, -20.000000f, -1.0000f, 0.0000f, 0.0000f, 0.2997f, 0.0386f,  // Vertex 53
        423.225006f, 51.836266f, -20.000000f, -1.0000f, 0.0000f, 0.0000f, 0.0313f, 0.0386f,  // Vertex 54
        -423.225006f, 101.836266f, -20.000000f, -1.0000f, 0.0000f, 0.0000f, 0.0366f, 0.0695f,  // Vertex 55
        423.225006f, 101.836266f, -20.000000f, -1.0000f, 0.0000f, 0.0000f, 0.2943f, 0.0695f,  // Vertex 56
        -423.225006f, 101.836266f, -30.000000f, -0.0239f, 0.9043f, 0.4263f, 0.2946f, 0.0343f,  // Vertex 57
        423.225006f, 101.836266f, -30.000000f, 0.0239f, 0.9043f, 0.4263f, 0.0363f, 0.0343f,  // Vertex 58
        -423.225006f, 51.836266f, -30.000000f, 0.0081f, 0.8782f, 0.4782f, 0.0455f, 0.5681f,  // Vertex 59
        423.225006f, 51.836266f, -30.000000f, -0.0081f, 0.8782f, 0.4782f, 0.0872f, 0.6069f,  // Vertex 60
        -423.225006f, 31.836266f, 20.000000f, 0.0375f, 0.9625f, 0.2687f, 0.0466f, 0.9308f,  // Vertex 61
        423.225006f, 31.836266f, 20.000000f, 0.0105f, 0.9758f, 0.2185f, 0.1743f, 0.9735f,  // Vertex 62
        -423.225006f, 81.836266f, 20.000000f, -0.0375f, 0.9625f, 0.2687f, 0.6216f, 0.1462f,  // Vertex 63
        423.225006f, 81.836266f, 20.000000f, -0.0105f, 0.9758f, 0.2185f, 0.6216f, 0.0255f,  // Vertex 64
        -423.225006f, 81.836266f, 10.000000f, 0.0000f, -0.3725f, -0.9281f, 0.6283f, 0.0255f,  // Vertex 65
        423.225006f, 81.836266f, 10.000000f, 0.0000f, -0.3725f, -0.9281f, 0.6283f, 0.1462f,  // Vertex 66
        -423.225006f, 31.836266f, 10.000000f, 0.0000f, -0.3725f, -0.9281f, 0.6331f, 0.1462f,  // Vertex 67
        423.225006f, 31.836266f, 10.000000f, 0.0000f, -0.3725f, -0.9281f, 0.6331f, 0.0255f,  // Vertex 68
        444.250000f, -77.108383f, 27.680336f, -0.9999f, 0.0022f, 0.0120f, 0.6371f, 0.0255f,  // Vertex 69
        475.750000f, -77.108383f, 27.680336f, -0.9999f, 0.0022f, 0.0120f, 0.6371f, 0.1462f,  // Vertex 70
        444.250000f, -64.422531f, 23.063065f, -0.9999f, 0.0022f, 0.0120f, 0.6385f, 0.0255f,  // Vertex 71
        475.750000f, -64.422531f, 23.063065f, -0.9999f, 0.0022f, 0.0120f, 0.6385f, 0.1462f,  // Vertex 72
        444.250000f, -82.891617f, -27.680336f, 0.0000f, -0.0273f, 0.9996f, 0.6344f, 0.0255f,  // Vertex 73
        475.750000f, -82.891617f, -27.680336f, 0.0000f, -0.0273f, 0.9996f, 0.6344f, 0.1462f,  // Vertex 74
        444.250000f, -95.577469f, -23.063065f, 0.0000f, -0.0273f, 0.9996f, 0.6432f, 0.1462f,  // Vertex 75
        475.750000f, -95.577469f, -23.063065f, 0.0000f, -0.0273f, 0.9996f, 0.6432f, 0.0255f,  // Vertex 76
        449.842834f, -91.056725f, -6.704293f, 0.9999f, 0.0022f, 0.0120f, 0.6500f, 0.0255f,  // Vertex 77
        455.664063f, -91.056725f, -6.704293f, 0.9999f, 0.0022f, 0.0120f, 0.6500f, 0.1462f,  // Vertex 78
        449.842834f, -87.504684f, -7.997129f, 0.9999f, 0.0022f, 0.0120f, 0.6548f, 0.1462f,  // Vertex 79
        455.664063f, -87.504684f, -7.997129f, 0.9999f, 0.0022f, 0.0120f, 0.6548f, 0.0255f,  // Vertex 80
        449.842834f, -91.848610f, -19.931976f, 0.0000f, -0.9779f, 0.2093f, 0.6561f, 0.0255f,  // Vertex 81
        455.664063f, -91.848610f, -19.931976f, 0.0000f, -0.9779f, 0.2093f, 0.6561f, 0.1462f,  // Vertex 82
        449.842834f, -95.400650f, -18.639141f, 0.0000f, -0.9779f, 0.2093f, 0.6612f, 0.0255f,  // Vertex 83
        455.664063f, -95.400650f, -18.639141f, 0.0000f, -0.9779f, 0.2093f, 0.6626f, 0.0255f,  // Vertex 84
        458.041077f, -91.056725f, -6.704293f, 0.0207f, -0.9432f, 0.3315f, 0.6626f, 0.0322f,  // Vertex 85
        463.862305f, -91.056725f, -6.704293f, 0.0207f, -0.9432f, 0.3315f, 0.6612f, 0.0322f,  // Vertex 86
        458.041077f, -87.504684f, -7.997129f, 0.0207f, -0.9432f, 0.3315f, 0.6666f, 0.0389f,  // Vertex 87
        463.862305f, -87.504684f, -7.997129f, 0.0207f, -0.9432f, 0.3315f, 0.6653f, 0.0389f,  // Vertex 88
        458.041077f, -91.848610f, -19.931976f, 0.0000f, -0.9442f, 0.3293f, 0.6756f, 0.0255f,  // Vertex 89
        463.862305f, -91.848610f, -19.931976f, 0.0000f, -0.9442f, 0.3293f, 0.6770f, 0.0255f,  // Vertex 90
        458.041077f, -95.400650f, -18.639141f, 0.0000f, -0.9442f, 0.3293f, 0.6770f, 0.0322f,  // Vertex 91
        463.862305f, -95.400650f, -18.639141f, 0.0000f, -0.9442f, 0.3293f, 0.6756f, 0.0322f,  // Vertex 92
        466.190308f, -91.056725f, -6.704293f, -0.0207f, -0.9432f, 0.3315f, 0.6729f, 0.0389f,  // Vertex 93
        472.011536f, -91.056725f, -6.704293f, -0.0207f, -0.9432f, 0.3315f, 0.6716f, 0.0389f,  // Vertex 94
        466.190308f, -87.504684f, -7.997129f, -0.0207f, -0.9432f, 0.3315f, 0.5424f, 0.1484f,  // Vertex 95
        472.011536f, -87.504684f, -7.997129f, -0.0207f, -0.9432f, 0.3315f, 0.5424f, 0.0250f,  // Vertex 96
        466.190308f, -91.848610f, -19.931976f, 0.0000f, 0.0000f, 1.0000f, 0.5492f, 0.0250f,  // Vertex 97
        472.011536f, -91.848610f, -19.931976f, 0.0000f, 0.0000f, 1.0000f, 0.5492f, 0.1484f,  // Vertex 98
        466.190308f, -95.400650f, -18.639141f, 0.0000f, 0.0000f, 1.0000f, 0.5543f, 0.1484f,  // Vertex 99
        472.011536f, -95.400650f, -18.639141f, 0.0000f, 0.0000f, 1.0000f, 0.5543f, 0.0250f,  // Vertex 100
        -5.000000f, 25.000000f, 32.737194f, -0.9998f, -0.0076f, 0.0187f, 0.5556f, 0.0250f,  // Vertex 101
        5.000000f, 25.000000f, 32.737194f, -0.9998f, -0.0076f, 0.0187f, 0.5556f, 0.1484f,  // Vertex 102
        -5.000000f, 85.000000f, 32.737194f, -0.9998f, -0.0076f, 0.0187f, 0.5608f, 0.1484f,  // Vertex 103
        5.000000f, 85.000000f, 32.737194f, -0.9998f, -0.0076f, 0.0187f, 0.5608f, 0.0250f,  // Vertex 104
        -5.000000f, 115.000000f, -37.262806f, 0.0000f, 0.6299f, -0.7767f, 0.5676f, 0.0250f,  // Vertex 105
        5.000000f, 115.000000f, -37.262806f, 0.0000f, 0.6299f, -0.7767f, 0.5676f, 0.1484f,  // Vertex 106
        -5.000000f, 25.000000f, -37.262806f, 0.0000f, 0.6299f, -0.7767f, 0.5727f, 0.1484f,  // Vertex 107
        5.000000f, 25.000000f, -37.262806f, 0.0000f, 0.6299f, -0.7767f, 0.5727f, 0.0250f,  // Vertex 108
        -405.000000f, 25.000000f, 32.737194f, 0.9998f, -0.0076f, 0.0187f, 0.5741f, 0.0250f,  // Vertex 109
        -395.000000f, 25.000000f, 32.737194f, 0.9998f, -0.0076f, 0.0187f, 0.5741f, 0.1484f,  // Vertex 110
        -405.000000f, 85.000000f, 32.737194f, 0.9998f, -0.0076f, 0.0187f, 0.5792f, 0.0250f,  // Vertex 111
        -395.000000f, 85.000000f, 32.737194f, 0.9998f, -0.0076f, 0.0187f, 0.5806f, 0.0250f,  // Vertex 112
        -405.000000f, 115.000000f, -37.262806f, 0.0000f, 0.0000f, 1.0000f, 0.5806f, 0.0319f,  // Vertex 113
        -395.000000f, 115.000000f, -37.262806f, 0.0000f, 0.0000f, 1.0000f, 0.5792f, 0.0319f,  // Vertex 114
        -405.000000f, 25.000000f, -37.262806f, 0.0000f, 0.3511f, 0.9363f, 0.5858f, 0.0250f,  // Vertex 115
        -395.000000f, 25.000000f, -37.262806f, 0.0000f, 0.3511f, 0.9363f, 0.5871f, 0.0250f,  // Vertex 116
        395.000000f, 25.000000f, 32.737194f, 0.0000f, 0.6000f, 0.8000f, 0.5871f, 0.0319f,  // Vertex 117
        405.000000f, 25.000000f, 32.737194f, 0.0000f, 0.6000f, 0.8000f, 0.5858f, 0.0319f,  // Vertex 118
        395.000000f, 85.000000f, 32.737194f, 0.0000f, 1.0000f, 0.0000f, 0.5424f, 0.1484f,  // Vertex 119
        405.000000f, 85.000000f, 32.737194f, 0.0000f, 1.0000f, 0.0000f, 0.5424f, 0.0250f,  // Vertex 120
        395.000000f, 115.000000f, -37.262806f, 0.0000f, 1.0000f, 0.0000f, 0.5492f, 0.0250f,  // Vertex 121
        405.000000f, 115.000000f, -37.262806f, 0.0000f, 1.0000f, 0.0000f, 0.5492f, 0.1484f,  // Vertex 122
        395.000000f, 25.000000f, -37.262806f, 0.0000f, -0.6000f, -0.8000f, 0.5543f, 0.1484f,  // Vertex 123
        405.000000f, 25.000000f, -37.262806f, 0.0000f, -0.6000f, -0.8000f, 0.5543f, 0.0250f,  // Vertex 124
        -12.500000f, -75.000000f, -67.500000f, 0.0000f, -0.3511f, -0.9363f, 0.5556f, 0.0250f,  // Vertex 125
        12.500000f, -75.000000f, -67.500000f, 0.0000f, -0.3511f, -0.9363f, 0.5556f, 0.1484f,  // Vertex 126
        -12.500000f, 75.000000f, -67.500000f, 0.0000f, 0.0000f, -1.0000f, 0.5608f, 0.1484f,  // Vertex 127
        12.500000f, 75.000000f, -67.500000f, 0.0000f, 0.0000f, -1.0000f, 0.5608f, 0.0250f,  // Vertex 128
        -12.500000f, 75.000000f, -92.500000f, 0.0000f, -1.0000f, 0.0000f, 0.5676f, 0.0250f,  // Vertex 129
        12.500000f, 75.000000f, -92.500000f, 0.0000f, -1.0000f, 0.0000f, 0.5676f, 0.1484f,  // Vertex 130
        -12.500000f, -75.000000f, -92.500000f, 0.0000f, -1.0000f, 0.0000f, 0.5727f, 0.1484f,  // Vertex 131
        12.500000f, -75.000000f, -92.500000f, 0.0000f, -1.0000f, 0.0000f, 0.5727f, 0.0250f,  // Vertex 132
        357.500000f, -75.000000f, -67.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5741f, 0.0250f,  // Vertex 133
        382.500000f, -75.000000f, -67.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5741f, 0.1484f,  // Vertex 134
        357.500000f, 75.000000f, -67.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5792f, 0.0250f,  // Vertex 135
        382.500000f, 75.000000f, -67.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5806f, 0.0250f,  // Vertex 136
        357.500000f, 75.000000f, -92.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5806f, 0.0319f,  // Vertex 137
        382.500000f, 75.000000f, -92.500000f, 1.0000f, 0.0000f, 0.0000f, 0.5792f, 0.0319f,  // Vertex 138
        357.500000f, -75.000000f, -92.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5858f, 0.0250f,  // Vertex 139
        382.500000f, -75.000000f, -92.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5871f, 0.0250f,  // Vertex 140
        -382.500000f, -75.000000f, -67.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5871f, 0.0319f,  // Vertex 141
        -357.500000f, -75.000000f, -67.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5858f, 0.0319f,  // Vertex 142
        -382.500000f, 75.000000f, -67.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5424f, 0.1484f,  // Vertex 143
        -357.500000f, 75.000000f, -67.500000f, -1.0000f, 0.0000f, 0.0000f, 0.5424f, 0.0250f,  // Vertex 144
        -382.500000f, 75.000000f, -92.500000f, 0.0000f, 0.0000f, 1.0000f, 0.5492f, 0.0250f,  // Vertex 145
        -357.500000f, 75.000000f, -92.500000f, 0.0000f, 0.0000f, 1.0000f, 0.5492f, 0.1484f,  // Vertex 146
        -382.500000f, -75.000000f, -92.500000f, 0.0000f, 0.0000f, 1.0000f, 0.5543f, 0.1484f,  // Vertex 147
        -357.500000f, -75.000000f, -92.500000f, 0.0000f, 0.0000f, 1.0000f, 0.5543f, 0.0250f,  // Vertex 148
        };

        indices = {
            0, 11, 10, 0, 10, 1,  // Face 1
            1, 3, 2, 1, 2, 0,  // Face 2
            3, 15, 14, 3, 14, 2,  // Face 3
            4, 9, 8, 4, 8, 5,  // Face 4
            5, 6, 7, 5, 7, 4,  // Face 5
            6, 13, 12, 6, 12, 7,  // Face 6
            9, 10, 11, 9, 11, 8,  // Face 7
            13, 14, 15, 13, 15, 12,  // Face 8
            8, 11, 14, 8, 14, 13,  // Face 9
            21, 23, 22, 21, 22, 20,  // Face 10
            1, 4, 7, 1, 7, 3,  // Face 11
            29, 31, 30, 29, 30, 28,  // Face 12
            12, 15, 3, 12, 3, 7,  // Face 13
            4, 1, 10, 4, 10, 9,  // Face 14
            11, 17, 16, 11, 16, 14,  // Face 15
            14, 16, 18, 14, 18, 2,  // Face 16
            2, 18, 19, 2, 19, 0,  // Face 17
            0, 19, 17, 0, 17, 11,  // Face 18
            17, 21, 20, 17, 20, 16,  // Face 19
            16, 20, 22, 16, 22, 18,  // Face 20
            18, 22, 23, 18, 23, 19,  // Face 21
            19, 23, 21, 19, 21, 17,  // Face 22
            5, 25, 24, 5, 24, 6,  // Face 23
            6, 24, 26, 6, 26, 13,  // Face 24
            13, 26, 27, 13, 27, 8,  // Face 25
            8, 27, 25, 8, 25, 5,  // Face 26
            25, 29, 28, 25, 28, 24,  // Face 27
            24, 28, 30, 24, 30, 26,  // Face 28
            26, 30, 31, 26, 31, 27,  // Face 29
            27, 31, 29, 27, 29, 25,  // Face 30
            32, 34, 35, 32, 35, 33,  // Face 31
            34, 36, 37, 34, 37, 35,  // Face 32
            36, 38, 39, 36, 39, 37,  // Face 33
            38, 40, 41, 38, 41, 39,  // Face 34
            40, 42, 43, 40, 43, 41,  // Face 35
            42, 32, 33, 42, 33, 43,  // Face 36
            33, 35, 41, 33, 41, 43,  // Face 37
            35, 37, 39, 35, 39, 41,  // Face 38
            42, 40, 34, 42, 34, 32,  // Face 39
            40, 38, 36, 40, 36, 34,  // Face 40
            44, 46, 47, 44, 47, 45,  // Face 41
            46, 48, 49, 46, 49, 47,  // Face 42
            48, 50, 51, 48, 51, 49,  // Face 43
            50, 44, 45, 50, 45, 51,  // Face 44
            45, 47, 49, 45, 49, 51,  // Face 45
            50, 48, 46, 50, 46, 44,  // Face 46
            52, 54, 55, 52, 55, 53,  // Face 47
            54, 56, 57, 54, 57, 55,  // Face 48
            56, 58, 59, 56, 59, 57,  // Face 49
            58, 52, 53, 58, 53, 59,  // Face 50
            53, 55, 57, 53, 57, 59,  // Face 51
            58, 56, 54, 58, 54, 52,  // Face 52
            60, 62, 63, 60, 63, 61,  // Face 53
            62, 64, 65, 62, 65, 63,  // Face 54
            64, 66, 67, 64, 67, 65,  // Face 55
            66, 60, 61, 66, 61, 67,  // Face 56
            61, 63, 65, 61, 65, 67,  // Face 57
            66, 64, 62, 66, 62, 60,  // Face 58
            68, 70, 71, 68, 71, 69,  // Face 59
            70, 72, 73, 70, 73, 71,  // Face 60
            72, 74, 75, 72, 75, 73,  // Face 61
            74, 68, 69, 74, 69, 75,  // Face 62
            69, 71, 73, 69, 73, 75,  // Face 63
            74, 72, 70, 74, 70, 68,  // Face 64
            76, 78, 79, 76, 79, 77,  // Face 65
            78, 80, 81, 78, 81, 79,  // Face 66
            80, 82, 83, 80, 83, 81,  // Face 67
            82, 76, 77, 82, 77, 83,  // Face 68
            77, 79, 81, 77, 81, 83,  // Face 69
            82, 80, 78, 82, 78, 76,  // Face 70
            84, 86, 87, 84, 87, 85,  // Face 71
            86, 88, 89, 86, 89, 87,  // Face 72
            88, 90, 91, 88, 91, 89,  // Face 73
            90, 84, 85, 90, 85, 91,  // Face 74
            85, 87, 89, 85, 89, 91,  // Face 75
            90, 88, 86, 90, 86, 84,  // Face 76
            92, 94, 95, 92, 95, 93,  // Face 77
            94, 96, 97, 94, 97, 95,  // Face 78
            96, 98, 99, 96, 99, 97,  // Face 79
            98, 92, 93, 98, 93, 99,  // Face 80
            93, 95, 97, 93, 97, 99,  // Face 81
            98, 96, 94, 98, 94, 92,  // Face 82
            100, 102, 103, 100, 103, 101,  // Face 83
            102, 104, 105, 102, 105, 103,  // Face 84
            104, 106, 107, 104, 107, 105,  // Face 85
            106, 100, 101, 106, 101, 107,  // Face 86
            101, 103, 105, 101, 105, 107,  // Face 87
            106, 104, 102, 106, 102, 100,  // Face 88
            108, 110, 111, 108, 111, 109,  // Face 89
            110, 112, 113, 110, 113, 111,  // Face 90
            112, 114, 115, 112, 115, 113,  // Face 91
            114, 108, 109, 114, 109, 115,  // Face 92
            109, 111, 113, 109, 113, 115,  // Face 93
            114, 112, 110, 114, 110, 108,  // Face 94
            116, 118, 119, 116, 119, 117,  // Face 95
            118, 120, 121, 118, 121, 119,  // Face 96
            120, 122, 123, 120, 123, 121,  // Face 97
            122, 116, 117, 122, 117, 123,  // Face 98
            117, 119, 121, 117, 121, 123,  // Face 99
            122, 120, 118, 122, 118, 116,  // Face 100
            124, 126, 127, 124, 127, 125,  // Face 101
            126, 128, 129, 126, 129, 127,  // Face 102
            128, 130, 131, 128, 131, 129,  // Face 103
            130, 124, 125, 130, 125, 131,  // Face 104
            125, 127, 129, 125, 129, 131,  // Face 105
            130, 128, 126, 130, 126, 124,  // Face 106
            132, 134, 135, 132, 135, 133,  // Face 107
            134, 136, 137, 134, 137, 135,  // Face 108
            136, 138, 139, 136, 139, 137,  // Face 109
            138, 132, 133, 138, 133, 139,  // Face 110
            133, 135, 137, 133, 137, 139,  // Face 111
            138, 136, 134, 138, 134, 132,  // Face 112
            140, 142, 143, 140, 143, 141,  // Face 113
            142, 144, 145, 142, 145, 143,  // Face 114
            144, 146, 147, 144, 147, 145,  // Face 115
            146, 140, 141, 146, 141, 147,  // Face 116
            141, 143, 145, 141, 145, 147,  // Face 117
            146, 144, 142, 146, 142, 140,  // Face 118
        };




        // Generate and bind VAO, VBO, EBO
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glGenBuffers(1, &EBO);

        glBindVertexArray(VAO);

        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);

        // Position attribute
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);

        // Normal attribute
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(1);

        // Texture coordinate attribute
        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
        glEnableVertexAttribArray(2);

        glBindVertexArray(0);
    }
};

#endif /* GLASS_H */
#pragma once
#pragma once
