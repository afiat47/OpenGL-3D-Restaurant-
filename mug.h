#pragma once
//
//  bottle.h
//  OpenGL Bottle Object
//

#ifndef MUG_H
#define MUG_H

#include <glad/glad.h>
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include "shader.h"

class Mug {
public:
    // Material properties
    glm::vec3 ambient;
    glm::vec3 diffuse;
    glm::vec3 specular;

    // Texture properties
    unsigned int diffuseMap;
    unsigned int specularMap;
    float shininess;

    // Constructor with default values
    Mug()
        : ambient(glm::vec3(0.2f)), diffuse(glm::vec3(0.5f)), specular(glm::vec3(1.0f)), shininess(32.0f),
        diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    Mug(glm::vec3 amb, glm::vec3 diff, glm::vec3 spec, float shiny)
        : ambient(amb), diffuse(diff), specular(spec), shininess(shiny), diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    Mug(unsigned int dMap, unsigned int sMap, float shiny)
        : diffuseMap(dMap), specularMap(sMap), shininess(shiny), ambient(glm::vec3(0.0f)), diffuse(glm::vec3(0.0f)), specular(glm::vec3(0.0f)) {
        setUpVertexData();
    }

    ~Mug() {
        glDeleteVertexArrays(1, &VAO);
        glDeleteBuffers(1, &VBO);
        glDeleteBuffers(1, &EBO);
    }

    void drawWithMaterial(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();
        shader.setVec3("material.ambient", ambient);
        shader.setVec3("material.diffuse", diffuse);
        shader.setVec3("material.specular", specular);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

    void drawWithTexture(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();

        shader.setInt("material.diffuse", 0);
        shader.setInt("material.specular", 1);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, diffuseMap);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, specularMap);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

private:
    unsigned int VAO, VBO, EBO;
    std::vector<float> vertices;
    std::vector<unsigned int> indices;

    void setUpVertexData() {
        // Define the vertex data (positions, normals, texture coordinates)
        vertices = {
          -0.593846f, -0.879849f, -0.485509f, -0.0000f, 1.0000f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 1
          -0.794951f, -0.879849f, 0.000000f, -0.9999f, -0.0129f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 2
          -0.593846f, -0.879849f, 0.485509f, -0.7070f, -0.0129f, 0.7070f, 0.0294f, 0.5044f,  // Vertex 3
          -0.108337f, -0.879849f, 0.686614f, 0.0000f, -0.0129f, -0.9999f, 0.0294f, 0.5044f,  // Vertex 4
          0.377172f, -0.879849f, 0.485509f, -0.7070f, -0.0129f, -0.7070f, 0.0294f, 0.5044f,  // Vertex 5
          0.578277f, -0.879849f, 0.000000f, 0.9999f, -0.0129f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 6
          0.377172f, -0.879849f, -0.485509f, 0.7070f, -0.0129f, -0.7070f, 0.0294f, 0.5044f,  // Vertex 7
          -0.108337f, -0.879849f, -0.686614f, -0.0000f, -0.0129f, 0.9999f, 0.0294f, 0.5044f,  // Vertex 8
          -0.570708f, 1.661228f, -0.462371f, 0.7070f, -0.0129f, 0.7070f, 0.0294f, 0.5044f,  // Vertex 9
          -0.762228f, 1.661228f, -0.000000f, -0.1478f, 0.9779f, 0.1478f, 0.0294f, 0.5044f,  // Vertex 10
          -0.570708f, 1.661228f, 0.462370f, -0.0000f, 0.9779f, 0.2091f, 0.0294f, 0.5044f,  // Vertex 11
          -0.108337f, 1.661228f, 0.653890f, -0.0000f, 0.9914f, 0.1309f, 0.0294f, 0.5044f,  // Vertex 12
          0.354033f, 1.661228f, 0.462370f, -0.0926f, 0.9914f, 0.0926f, 0.0294f, 0.5044f,  // Vertex 13
          0.545554f, 1.661228f, -0.000000f, 0.2453f, -0.9379f, 0.2453f, 0.0294f, 0.5044f,  // Vertex 14
          0.354033f, 1.661228f, -0.462371f, -0.0000f, -0.9379f, 0.3469f, 0.0294f, 0.5044f,  // Vertex 15
          -0.108337f, 1.661228f, -0.653891f, -0.0000f, -0.9759f, 0.2181f, 0.0294f, 0.5044f,  // Vertex 16
          -0.108337f, 1.661228f, -0.734180f, 0.1543f, -0.9759f, 0.1543f, 0.0294f, 0.5044f,  // Vertex 17
          0.410806f, 1.661228f, -0.519143f, -0.7071f, -0.0000f, -0.7071f, 0.0294f, 0.5044f,  // Vertex 18
          0.625842f, 1.661228f, -0.000000f, -0.6953f, -0.1817f, -0.6953f, 0.0294f, 0.5044f,  // Vertex 19
          0.410806f, 1.661228f, 0.519143f, -0.9833f, -0.1817f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 20
          -0.108337f, 1.661228f, 0.734179f, -1.0000f, 0.0000f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 21
          -0.627480f, 1.661228f, 0.519143f, -0.7071f, 0.0000f, 0.7071f, 0.0294f, 0.5044f,  // Vertex 22
          -0.842516f, 1.661228f, -0.000000f, -0.6953f, -0.1817f, 0.6953f, 0.0294f, 0.5044f,  // Vertex 23
          -0.627480f, 1.661228f, -0.519143f, -0.0000f, -0.1817f, 0.9833f, 0.0294f, 0.5044f,  // Vertex 24
          -0.108337f, -0.941538f, -0.734179f, -0.0000f, 0.0000f, 1.0000f, 0.0294f, 0.5044f,  // Vertex 25
          0.410806f, -0.941538f, -0.519143f, 0.7071f, 0.0000f, 0.7071f, 0.0294f, 0.5044f,  // Vertex 26
          0.625842f, -0.941538f, 0.000000f, 0.6953f, -0.1817f, 0.6953f, 0.0294f, 0.5044f,  // Vertex 27
          0.410806f, -0.941538f, 0.519143f, 0.9833f, -0.1817f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 28
          -0.108337f, -0.941538f, 0.734179f, 1.0000f, -0.0000f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 29
          -0.627480f, -0.941538f, 0.519143f, 0.7071f, -0.0000f, -0.7071f, 0.0294f, 0.5044f,  // Vertex 30
          -0.842516f, -0.941538f, 0.000000f, 0.6953f, -0.1817f, -0.6953f, 0.0294f, 0.5044f,  // Vertex 31
          -0.627480f, -0.941538f, -0.519143f, -0.0000f, -0.1817f, -0.9833f, 0.0294f, 0.5044f,  // Vertex 32
          -0.108337f, -1.006243f, -0.466583f, 0.0000f, -0.0000f, -1.0000f, 0.0294f, 0.5044f,  // Vertex 33
          0.221587f, -1.006243f, -0.329924f, -0.1543f, -0.9759f, 0.1543f, 0.0294f, 0.5044f,  // Vertex 34
          0.358246f, -1.006243f, 0.000000f, -0.2181f, -0.9759f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 35
          0.221587f, -1.006243f, 0.329924f, -0.1543f, -0.9759f, -0.1543f, 0.0294f, 0.5044f,  // Vertex 36
          -0.108337f, -1.006243f, 0.466583f, -0.0000f, -0.9759f, -0.2181f, 0.0294f, 0.5044f,  // Vertex 37
          -0.438261f, -1.006243f, 0.329924f, 0.1543f, -0.9759f, -0.1543f, 0.0294f, 0.5044f,  // Vertex 38
          -0.574920f, -1.006243f, 0.000000f, 0.2181f, -0.9759f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 39
          -0.438261f, -1.006243f, -0.329924f, 0.2453f, -0.9379f, -0.2453f, 0.0294f, 0.5044f,  // Vertex 40
          -0.108337f, -1.084051f, -0.676928f, 0.3469f, -0.9379f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 41
          -0.586998f, -1.084051f, -0.478661f, -0.2453f, -0.9379f, -0.2453f, 0.0294f, 0.5044f,  // Vertex 42
          -0.785266f, -1.084051f, 0.000000f, 0.0000f, -0.9379f, -0.3469f, 0.0294f, 0.5044f,  // Vertex 43
          -0.586998f, -1.084051f, 0.478661f, -0.2453f, -0.9379f, 0.2453f, 0.0294f, 0.5044f,  // Vertex 44
          -0.108337f, -1.084051f, 0.676929f, -0.3469f, -0.9379f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 45
          0.370324f, -1.084051f, 0.478661f, 0.6561f, -0.3728f, -0.6561f, 0.0294f, 0.5044f,  // Vertex 46
          0.568591f, -1.084051f, 0.000000f, -0.0000f, -0.3728f, -0.9279f, 0.0294f, 0.5044f,  // Vertex 47
          0.370324f, -1.084051f, -0.478661f, 0.6561f, -0.3728f, 0.6561f, 0.0294f, 0.5044f,  // Vertex 48
          -0.416071f, -0.933598f, -0.307734f, 0.9279f, -0.3728f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 49
          -0.108337f, -0.933598f, -0.435202f, -0.6561f, -0.3728f, 0.6561f, 0.0294f, 0.5044f,  // Vertex 50
          -0.543539f, -0.933598f, 0.000000f, -0.0000f, -0.3728f, 0.9279f, 0.0294f, 0.5044f,  // Vertex 51
          -0.416071f, -0.933598f, 0.307734f, -0.6561f, -0.3728f, -0.6561f, 0.0294f, 0.5044f,  // Vertex 52
          -0.108337f, -0.933598f, 0.435202f, -0.9279f, -0.3728f, 0.0000f, 0.0294f, 0.5044f,  // Vertex 53
          0.199397f, -0.933598f, 0.307734f, 0.0926f, 0.9914f, 0.0926f, 0.0294f, 0.5044f,  // Vertex 54
          0.326865f, -0.933598f, 0.000000f, 0.1309f, 0.9914f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 55
          0.199397f, -0.933598f, -0.307734f, 0.0926f, 0.9914f, -0.0926f, 0.0294f, 0.5044f,  // Vertex 56
          0.534185f, 1.016274f, -0.210457f, 0.0000f, 0.9914f, -0.1309f, 0.0294f, 0.5044f,  // Vertex 57
          0.578681f, 1.079878f, -0.074005f, -0.0926f, 0.9914f, -0.0926f, 0.0294f, 0.5044f,  // Vertex 58
          0.578681f, 1.079878f, 0.074005f, -0.1309f, 0.9914f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 59
          0.523139f, 1.016274f, 0.210457f, -0.1478f, 0.9779f, -0.1478f, 0.0294f, 0.5044f,  // Vertex 60
          0.536614f, -0.375253f, -0.210457f, -0.2091f, 0.9779f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 61
          0.578681f, -0.439956f, -0.074005f, 0.1478f, 0.9779f, -0.1478f, 0.0294f, 0.5044f,  // Vertex 62
          0.578681f, -0.439956f, 0.074005f, -0.0000f, 0.9779f, -0.2091f, 0.0294f, 0.5044f,  // Vertex 63
          0.530346f, -0.375253f, 0.210457f, 0.1478f, 0.9779f, 0.1478f, 0.0294f, 0.5044f,  // Vertex 64
          0.578681f, 0.902969f, -0.047546f, 0.2091f, 0.9779f, -0.0000f, 0.0294f, 0.5044f,  // Vertex 65
          0.534185f, 0.947856f, -0.185806f, 0.0000f, -0.9855f, -0.1698f, 0.0294f, 0.5044f,  // Vertex 66
          0.523139f, 0.947857f, 0.185806f, 0.0000f, -0.6818f, -0.7315f, 0.0294f, 0.5044f,  // Vertex 67
          0.578681f, 0.902969f, 0.047545f, -0.1267f, -0.6453f, -0.7533f, 0.0294f, 0.5044f,  // Vertex 68
          0.578681f, -0.259992f, -0.047546f, -0.1808f, -0.9668f, -0.1809f, 0.0294f, 0.5044f,  // Vertex 69
          0.536614f, -0.305654f, -0.185806f, 0.0000f, 0.6746f, 0.7381f, 0.0294f, 0.5044f,  // Vertex 70
          0.530346f, -0.305654f, 0.185806f, 0.0000f, -0.2911f, 0.9567f, 0.0294f, 0.5044f,  // Vertex 71
          0.578681f, -0.259992f, 0.047546f, 0.0498f, -0.4465f, 0.8934f, 0.0294f, 0.5044f,  // Vertex 72
          1.141403f, 0.844049f, -0.210457f, -0.1231f, 0.6403f, 0.7582f, 0.0294f, 0.5044f,  // Vertex 73
          0.970039f, 1.016274f, -0.210457f, -0.9646f, 0.1862f, -0.1866f, 0.0294f, 0.5044f,  // Vertex 74
          1.091056f, 0.965830f, -0.210457f, -0.9646f, 0.1862f, 0.1866f, 0.0294f, 0.5044f,  // Vertex 75
          1.031098f, 1.079878f, -0.074005f, -0.9693f, -0.1682f, 0.1796f, 0.0294f, 0.5044f,  // Vertex 76
          1.202603f, 0.908554f, -0.074005f, -0.9693f, -0.1682f, -0.1796f, 0.0294f, 0.5044f,  // Vertex 77
          1.151865f, 1.029699f, -0.074005f, 0.0000f, 0.9848f, 0.1735f, 0.0294f, 0.5044f,  // Vertex 78
          1.202603f, 0.908554f, 0.074005f, -0.1736f, 0.9673f, 0.1849f, 0.0294f, 0.5044f,  // Vertex 79
          1.031098f, 1.079878f, 0.074005f, 0.4468f, -0.0504f, 0.8932f, 0.0294f, 0.5044f,  // Vertex 80
          1.151865f, 1.029699f, 0.074005f, 0.9468f, -0.1997f, 0.2525f, 0.0294f, 0.5044f,  // Vertex 81
          0.970039f, 1.016274f, 0.210457f, 0.9471f, 0.2094f, 0.2432f, 0.0294f, 0.5044f,  // Vertex 82
          1.141403f, 0.844049f, 0.210457f, 0.4469f, 0.0533f, 0.8930f, 0.0294f, 0.5044f,  // Vertex 83
          1.091056f, 0.965830f, 0.210457f, 0.0000f, 0.6801f, -0.7331f, 0.0294f, 0.5044f,  // Vertex 84
          0.970587f, -0.375253f, -0.210457f, 0.0000f, 0.9851f, -0.1719f, 0.0294f, 0.5044f,  // Vertex 85
          1.143692f, -0.203134f, -0.210457f, -0.1736f, 0.9673f, -0.1849f, 0.0294f, 0.5044f,  // Vertex 86
          1.093146f, -0.324840f, -0.210457f, -0.1231f, 0.6403f, -0.7582f, 0.0294f, 0.5044f,  // Vertex 87
          1.210987f, -0.268436f, -0.074005f, 0.0000f, 0.2981f, -0.9545f, 0.0294f, 0.5044f,  // Vertex 88
          1.039540f, -0.439956f, -0.074005f, 0.0000f, 0.9721f, -0.2345f, 0.0294f, 0.5044f,  // Vertex 89
          1.161277f, -0.389719f, -0.074005f, 0.2044f, 0.9480f, -0.2440f, 0.0294f, 0.5044f,  // Vertex 90
          1.039540f, -0.439956f, 0.074005f, 0.0539f, 0.4476f, -0.8926f, 0.0294f, 0.5044f,  // Vertex 91
          1.210987f, -0.268436f, 0.074005f, 0.0000f, -0.9715f, -0.2370f, 0.0294f, 0.5044f,  // Vertex 92
          1.161277f, -0.389719f, 0.074005f, 0.0000f, -0.3037f, -0.9528f, 0.0294f, 0.5044f,  // Vertex 93
          1.143692f, -0.203133f, 0.210457f, 0.0498f, -0.4465f, -0.8934f, 0.0294f, 0.5044f,  // Vertex 94
          0.970587f, -0.375253f, 0.210457f, 0.2044f, -0.9460f, -0.2515f, 0.0294f, 0.5044f,  // Vertex 95
          1.093146f, -0.324840f, 0.210457f, 0.0000f, -0.9710f, 0.2392f, 0.0294f, 0.5044f,  // Vertex 96
          1.031908f, 0.731127f, -0.047546f, 0.2044f, -0.9460f, 0.2515f, 0.0294f, 0.5044f,  // Vertex 97
          0.863689f, 0.902969f, -0.047546f, 0.4468f, -0.0504f, -0.8932f, 0.0294f, 0.5044f,  // Vertex 98
          0.983300f, 0.852638f, -0.047546f, -0.6366f, 0.1277f, -0.7605f, 0.0294f, 0.5044f,  // Vertex 99
          0.905441f, 0.947856f, -0.185806f, -0.6485f, -0.1218f, -0.7514f, 0.0294f, 0.5044f,  // Vertex 100
          1.075368f, 0.775105f, -0.185806f, 0.4469f, 0.0533f, -0.8930f, 0.0294f, 0.5044f,  // Vertex 101
          1.025902f, 0.897259f, -0.185806f, -0.6366f, 0.1277f, 0.7605f, 0.0294f, 0.5044f,  // Vertex 102
          1.075368f, 0.775105f, 0.185806f, -0.6485f, -0.1218f, 0.7514f, 0.0294f, 0.5044f,  // Vertex 103
          0.905441f, 0.947857f, 0.185806f, 0.0000f, -0.6721f, 0.7405f, 0.0294f, 0.5044f,  // Vertex 104
          1.025902f, 0.897259f, 0.185806f, 0.0000f, -0.9850f, 0.1726f, 0.0294f, 0.5044f,  // Vertex 105
          0.863689f, 0.902969f, 0.047545f, -0.1808f, -0.9668f, 0.1809f, 0.0294f, 0.5044f,  // Vertex 106
          1.031908f, 0.731127f, 0.047546f, -0.1267f, -0.6453f, 0.7533f, 0.0294f, 0.5044f,  // Vertex 107
          0.983300f, 0.852638f, 0.047545f, 0.0000f, 0.2755f, 0.9613f, 0.0294f, 0.5044f,  // Vertex 108
          0.850609f, -0.259992f, -0.047546f, 0.0539f, 0.4476f, 0.8926f, 0.0294f, 0.5044f,  // Vertex 109
          1.024264f, -0.090011f, -0.047546f, 0.0000f, 0.9712f, 0.2382f, 0.0294f, 0.5044f,  // Vertex 110
          0.972746f, -0.210206f, -0.047546f, 0.2044f, 0.9480f, 0.2440f, 0.0294f, 0.5044f,  // Vertex 111
          1.071498f, -0.134745f, -0.185806f, 0.9468f, -0.1997f, -0.2525f, 0.0294f, 0.5044f,  // Vertex 112
          0.897722f, -0.305654f, -0.185806f, 0.9471f, 0.2093f, -0.2432f, 0.0294f, 0.5044f,  // Vertex 113
          1.020299f, -0.255596f, -0.185806f, -0.6967f, -0.6828f, -0.2199f, 0.0294f, 0.5044f,  // Vertex 114
          0.897721f, -0.305654f, 0.185806f, -0.4090f, -0.4029f, -0.8188f, 0.0294f, 0.5044f,  // Vertex 115
          1.071498f, -0.134745f, 0.185806f, -0.4090f, -0.4029f, 0.8188f, 0.0294f, 0.5044f,  // Vertex 116
          1.020299f, -0.255596f, 0.185806f, -0.6967f, -0.6828f, 0.2199f, 0.0294f, 0.5044f,  // Vertex 117
          1.024264f, -0.090011f, 0.047546f, -0.3928f, 0.3987f, -0.8287f, 0.0294f, 0.5044f,  // Vertex 118
          0.850609f, -0.259992f, 0.047546f, -0.6808f, 0.6948f, -0.2319f, 0.0294f, 0.5044f,  // Vertex 119
          0.972746f, -0.210205f, 0.047546f, -0.6808f, 0.6948f, 0.2319f, 0.0294f, 0.5044f,  // Vertex 120
        };

        indices = {
            18, 13, 14, 18, 14, 17,  // Face 1
            20, 11, 12, 20, 12, 19,  // Face 2
            22, 9, 10, 22, 10, 21,  // Face 3
            16, 15, 8, 16, 8, 23,  // Face 4
            17, 14, 15, 17, 15, 16,  // Face 5
            19, 12, 13, 19, 13, 18,  // Face 6
            21, 10, 11, 21, 11, 20,  // Face 7
            23, 8, 9, 23, 9, 22,  // Face 8
            13, 5, 6, 13, 6, 14,  // Face 9
            11, 3, 4, 11, 4, 12,  // Face 10
            9, 1, 2, 9, 2, 10,  // Face 11
            15, 7, 0, 15, 0, 8,  // Face 12
            14, 6, 7, 14, 7, 15,  // Face 13
            12, 4, 5, 12, 5, 13,  // Face 14
            10, 2, 3, 10, 3, 11,  // Face 15
            8, 0, 1, 8, 1, 9,  // Face 16
            6, 55, 49, 6, 49, 7,  // Face 17
            41, 39, 32, 41, 32, 40,  // Face 18
            23, 22, 30, 23, 30, 31,  // Face 19
            21, 20, 28, 21, 28, 29,  // Face 20
            19, 18, 26, 19, 26, 27,  // Face 21
            17, 16, 24, 17, 24, 25,  // Face 22
            16, 23, 31, 16, 31, 24,  // Face 23
            22, 21, 29, 22, 29, 30,  // Face 24
            20, 19, 27, 20, 27, 28,  // Face 25
            18, 17, 25, 18, 25, 26,  // Face 26
            43, 37, 38, 43, 38, 42,  // Face 27
            45, 35, 36, 45, 36, 44,  // Face 28
            47, 33, 34, 47, 34, 46,  // Face 29
            42, 38, 39, 42, 39, 41,  // Face 30
            44, 36, 37, 44, 37, 43,  // Face 31
            46, 34, 35, 46, 35, 45,  // Face 32
            40, 32, 33, 40, 33, 47,  // Face 33
            24, 40, 47, 24, 47, 25,  // Face 34
            26, 46, 45, 26, 45, 27,  // Face 35
            28, 44, 43, 28, 43, 29,  // Face 36
            30, 42, 41, 30, 41, 31,  // Face 37
            25, 47, 46, 25, 46, 26,  // Face 38
            27, 45, 44, 27, 44, 28,  // Face 39
            29, 43, 42, 29, 42, 30,  // Face 40
            31, 41, 40, 31, 40, 24,  // Face 41
            4, 53, 54, 4, 54, 5,  // Face 42
            2, 51, 52, 2, 52, 3,  // Face 43
            0, 48, 50, 0, 50, 1,  // Face 44
            5, 54, 55, 5, 55, 6,  // Face 45
            3, 52, 53, 3, 53, 4,  // Face 46
            1, 50, 51, 1, 51, 2,  // Face 47
            7, 49, 48, 7, 48, 0,  // Face 48
            64, 97, 99, 64, 99, 65,  // Face 49
            70, 114, 94, 70, 94, 63,  // Face 50
            109, 96, 106, 109, 106, 117,  // Face 51
            71, 118, 114, 71, 114, 70,  // Face 52
            93, 82, 78, 93, 78, 91,  // Face 53
            69, 112, 108, 69, 108, 68,  // Face 54
            56, 73, 75, 56, 75, 57,  // Face 55
            68, 108, 118, 68, 118, 71,  // Face 56
            61, 88, 84, 61, 84, 60,  // Face 57
            63, 94, 90, 63, 90, 62,  // Face 58
            85, 72, 100, 85, 100, 111,  // Face 59
            62, 90, 88, 62, 88, 61,  // Face 60
            115, 102, 82, 115, 82, 93,  // Face 61
            111, 100, 96, 111, 96, 109,  // Face 62
            60, 84, 112, 60, 112, 69,  // Face 63
            117, 106, 102, 117, 102, 115,  // Face 64
            66, 103, 105, 66, 105, 67,  // Face 65
            59, 81, 103, 59, 103, 66,  // Face 66
            58, 79, 81, 58, 81, 59,  // Face 67
            57, 75, 79, 57, 79, 58,  // Face 68
            65, 99, 73, 65, 73, 56,  // Face 69
            91, 78, 76, 91, 76, 87,  // Face 70
            67, 105, 97, 67, 97, 64,  // Face 71
            100, 101, 98, 100, 98, 96,  // Face 72
            101, 99, 97, 101, 97, 98,  // Face 73
            106, 107, 104, 106, 104, 102,  // Face 74
            107, 105, 103, 107, 103, 104,  // Face 75
            109, 110, 113, 109, 113, 111,  // Face 76
            110, 108, 112, 110, 112, 113,  // Face 77
            115, 116, 119, 115, 119, 117,  // Face 78
            116, 114, 118, 116, 118, 119,  // Face 79
            76, 77, 74, 76, 74, 72,  // Face 80
            77, 75, 73, 77, 73, 74,  // Face 81
            82, 83, 80, 82, 80, 78,  // Face 82
            83, 81, 79, 83, 79, 80,  // Face 83
            85, 86, 89, 85, 89, 87,  // Face 84
            86, 84, 88, 86, 88, 89,  // Face 85
            91, 92, 95, 91, 95, 93,  // Face 86
            92, 90, 94, 92, 94, 95,  // Face 87
            78, 80, 77, 78, 77, 76,  // Face 88
            80, 79, 75, 80, 75, 77,  // Face 89
            72, 74, 101, 72, 101, 100,  // Face 90
            74, 73, 99, 74, 99, 101,  // Face 91
            102, 104, 83, 102, 83, 82,  // Face 92
            104, 103, 81, 104, 81, 83,  // Face 93
            87, 89, 92, 87, 92, 91,  // Face 94
            89, 88, 90, 89, 90, 92,  // Face 95
            111, 113, 86, 111, 86, 85,  // Face 96
            113, 112, 84, 113, 84, 86,  // Face 97
            93, 95, 116, 93, 116, 115,  // Face 98
            95, 94, 114, 95, 114, 116,  // Face 99
            96, 98, 107, 96, 107, 106,  // Face 100
            98, 97, 105, 98, 105, 107,  // Face 101
            117, 119, 110, 117, 110, 109,  // Face 102
            119, 118, 108, 119, 108, 110,  // Face 103
            87, 76, 72, 87, 72, 85,  // Face 104
        };





        // Generate and bind VAO, VBO, EBO
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glGenBuffers(1, &EBO);

        glBindVertexArray(VAO);

        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);

        // Position attribute
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);

        // Normal attribute
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(1);

        // Texture coordinate attribute
        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
        glEnableVertexAttribArray(2);

        glBindVertexArray(0);
    }
};

#endif /* GLASS_H */
#pragma once
